{"name":"IDBFS","tagline":"IndexedDB file system","body":"IDBFS is provides a POSIX-like file system interface for browser-based JavaScript.\r\n\r\n* [idbfs.js](https://github.com/js-platform/idbfs/blob/develop/dist/idbfs.js)\r\n* [idbfs.min.js](https://github.com/js-platform/idbfs/blob/develop/dist/idbfs.min.js)\r\n\r\n### Getting Started\r\n\r\nIDBFS is partly based on the `fs` module from node.js. The API is asynchronous and most methods require the caller to provide a callback function. Errors are passed to callbacks through the first parameter.\r\n\r\nTo create a new file system or open an existing one, create a new `FileSystem` instance and pass the name of the file system. A new IndexedDB database is created for each file system.\r\n\r\n#### Example\r\n\r\n````\r\n<script>\r\n  var fs = new IDBFS.FileSystem('local');\r\n  fs.open('/myfile', 'w+', function(err, fd) {\r\n    if (err) throw err;\r\n    fs.close(fd, function(err) {\r\n      if (err) throw err;\r\n      fs.stat('/myfile', function(err, stats) {\r\n        if (err) throw err;\r\n        console.log('stats: ' + JSON.stringify(stats));\r\n      });\r\n    });\r\n  });\r\n</script>\r\n````\r\n\r\nAs with node.js, there is no guarantee that file system operations will be executed in the order they are invoked. Ensure proper ordering by chaining operations in callbacks.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}